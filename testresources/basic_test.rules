# basic test rules
in.val <=> out.val         # fail no when clause -should fail
in.val <=> out.val when(in.tst = 0, out.tst = 0) # tst 0 pass - both sides the same
pad("0", 3, in.val) <=> pad("0", 3, out.val) when(in.tst = 0, out.tst = 0) # tst 0 pass - both sides the same
in.val <=> out.val when(in.tst = 0, pad("0",2,out.tst) = "00") # tst 0 pass - both sides the same
in.val <=> out.val when(in.tst = 0, pad("0",2,out.tst) = "01") # tst 0 pass - both sides the same

in.val <=> out.val when(in.tst = 1, out.tst = 1) # tst 1 fail - left has value not in right
in.val <=> out.val when(in.tst = 2, out.tst = 2) # tst 2 fail - right has value not in left
in.val <=> out.val when(in.tst = 3, out.tst = 3) # tst 3 fail - left has duplicated value
in.val <=> out.val when(in.tst = 4, out.tst = 4) # tst 4 fail - right has duplicated value
in.val <=> out.val when(in.tst = 5, out.tst = 5) # tst 5 fail - each side has some same and some different
in.val <=> out.val when(in.tst = 6, out.tst = 6) # tst 6 pass - no matching data  passes
in.val + 1 <=> out.val when(in.tst = 6, out.tst = 6) # tst 6 pass - no matching data passes

out.val <=> count(in.val) when(out.tst=7, in.tst=0) # tst 7 pass - count instances in tst 1
out.val <=> count(in.val) when(out.tst=8, in.tst=0, in.val > 1) # tst 8 pass - count instances in tst 1 with val > 1

# test some aggregate methods
# there are two in.tst=3 and one out.tst = 3
count(in.val) <=> count(out.val)+1  when(in.tst = 3, out.tst=3) # test pass
count(in.val) <=> count(out.val)  when(in.tst = 3, out.tst=3) # test should fail
# there are no in.tst = 2 and 1 out.tst =2
count(in.val) +1 <=> count(out.val)  when(in.tst = 2, out.tst=2) # test pass 
# should fail because (0+2) != (1)
count(in.val) +2 <=> count(out.val)  when(in.tst = 2, out.tst=2) # test fail 
count(in.val) <=> count(out.val) when(in.tst = out.tst) # test fail [ambiguous] 
in.val <=> out.val when(in.tst = out.tst) # test fail 
in.val <=> out.val when(in.tst = 5, out.tst = 5) # test fail 
in.val <=> out.val when(in.tst = 0, out.tst = 0) # test pass 
in.val <=> out.val when(in.tst = 5, out.tst = 5, in.tst = out.tst) # test fail 
in.val <=> out.val when(in.tst = 0, in.tst = out.tst) # test pass 

# tests with IP addresses
out.ipv4 <=>in.ipv4 when(out.tst=99, in.tst=99) # should pass 
out.ipv4 <=>in.ipv4 when(out.tst=98, in.tst=98) # should fail, one on each side

